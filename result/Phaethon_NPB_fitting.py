{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Derive Polarimetric Paramter\n",
    "\n",
    "\n",
    "\n",
    "#==========================================\n",
    "#Import packages and define the function\n",
    "#==========================================\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import theano\n",
    "import pymc3 as pm\n",
    "\n",
    "\n",
    "def d2r(x): return np.deg2rad(x)\n",
    "def r2d(x): return np.rad2deg(x)\n",
    "def sin(x): return np.sin(x)\n",
    "def cos(x): return np.cos(x)\n",
    "def tan(x): return np.tan(x)\n",
    "def log(x): return np.log(x)\n",
    "def log10(x): return np.log10(x)\n",
    "def exp(x):\n",
    "    return np.exp(x)\n",
    "def ln(x):\n",
    "    return np.log(x)\n",
    "def trigonal_function(alpha,h,a0,c1,c2):\n",
    "    alpha_rad = d2r(alpha)\n",
    "    a0_rad = d2r(a0)\n",
    "    D2R = 3.14/180\n",
    "    P_alpha = (h / D2R \n",
    "             * (sin(alpha_rad) / sin(a0_rad))**c1 \n",
    "             * (cos(alpha_rad / 2) / cos(a0_rad/ 2))**c2 \n",
    "             * sin(alpha_rad - a0_rad)\n",
    "            )\n",
    "    return P_alpha\n",
    "def exponential(x,a,b,c):\n",
    "    eq = a*np.exp(-x/b) -a + c*x\n",
    "    return eq \n",
    "\n",
    "\n",
    "\n",
    "#==========================================\n",
    "#Bring the data\n",
    "#==========================================\n",
    "\n",
    "df = pd.read_csv('Phaethon_data.csv')\n",
    "\n",
    "\n",
    "\n",
    "#==========================================\n",
    "#Set the initial  condition\n",
    "#==========================================\n",
    "##GIVEN CONDITION\n",
    "\n",
    "\n",
    "#Phase angle range\n",
    "df_tri = df[df['alpha']<30] #For Trigonal\n",
    "df_exp = df[df['alpha']<30] #For Exponential\n",
    "\n",
    "\n",
    "#Trigonal\n",
    "Boundary_tri = pd.DataFrame({'h':[0,1], #lower , upper boundary\n",
    "                           'a0':[10,30],\n",
    "                           'c1':[0,10],\n",
    "                           'c2':[0,10]})\n",
    "p0_tri = [0.10, 20,0.67, 0.1]\n",
    "\n",
    "#EXPONENTIAL\n",
    "Boundary_exp = pd.DataFrame({'a':[10,20], #lower , upper boundary\n",
    "                           'b':[15,25],\n",
    "                           'c':[0,1]})\n",
    "p0_exp = [ 15.22876846, 18.71077083,  0.49865412]\n",
    "\n",
    "##======================================================================================================\n",
    "\n",
    "\n",
    "#==========================================\n",
    "# Start fitting\n",
    "#==========================================\n",
    "\n",
    "\n",
    "# Trigonal ================================\n",
    "\n",
    "D2R = 3.14/180\n",
    "basic_model_tri = pm.Model()\n",
    "\n",
    "alpha = df_tri['alpha'].values\n",
    "P = df_tri['P'].values\n",
    "eP = df_tri['eP'].values\n",
    "\n",
    "##TRIGONAL\n",
    "with basic_model_tri:\n",
    "    h = pm.Uniform('h',  Boundary_tri['h'].values[0],  Boundary_tri['h'].values[1])\n",
    "    a0 = pm.Uniform('a0', Boundary_tri['a0'].values[0], Boundary_tri['a0'].values[1])\n",
    "    c1 = pm.Uniform('c1', Boundary_tri['c1'].values[0], Boundary_tri['c1'].values[1])\n",
    "    c2 = pm.Uniform('c2', Boundary_tri['c2'].values[0], Boundary_tri['c2'].values[1])\n",
    "\n",
    "    sigma = theano.shared(np.asarray(eP, dtype=theano.config.floatX), name='sigma')\n",
    "    P_alpha = trigonal_function(alpha,h,a0,c1,c2)\n",
    "\n",
    "    liklihood = pm.Normal('likelihood', mu=P_alpha, sd=sigma, observed=P)\n",
    "    trace_tri = pm.sample(20000, start=dict(h=p0_tri[0],\n",
    "                                           a0=p0_tri[1],\n",
    "                                           c1=p0_tri[2], \n",
    "                                           c2=p0_tri[3]))\n",
    "    \n",
    "summary_tri = pm.summary(trace_tri, hdi_prob=0.6827).round(5)   \n",
    "pm.traceplot(trace_tri)\n",
    "pm.summary(trace_tri, hdi_prob=0.6827).round(5)     \n",
    "\n",
    "\n",
    "#Deriving Pmin & Slope h\n",
    "from scipy.stats import chi2\n",
    "samples_tri = np.array([trace_tri.get_values(key) for key in ['h','a0','c1','c2']]).T\n",
    "\n",
    "delta = chi2.ppf(0.6827, len(['h','a0','c1','c2']))\n",
    "n_trace_tri = trace_tri['h'].shape[0]\n",
    "log_tri =  dict(h=trace_tri['h'], a0=trace_tri['a0'], c1=trace_tri['c1'], c2=trace_tri['c2'])\n",
    "\n",
    "Pmin_Tri_mcmc_dist = []\n",
    "amin_Tri_mcmc_dist = []\n",
    "hmin_Tri_mcmc_dist = []\n",
    "\n",
    "for i in range(len(trace_tri['h'])):\n",
    "    h_i = log_tri['h'][i]\n",
    "    a0_i = log_tri['a0'][i]\n",
    "    c1_i = log_tri['c1'][i]\n",
    "    c2_i = log_tri['c2'][i]\n",
    "    \n",
    "    xxx = np.arange(5,15,0.01)\n",
    "    P_i = trigonal_function(xxx,h_i,a0_i,c1_i,c2_i)\n",
    "    Pmin_i = min(P_i)\n",
    "    order = list(P_i).index(Pmin_i)\n",
    "    amin_i = xxx[order]\n",
    "    Pmin_Tri_mcmc_dist.append(Pmin_i)\n",
    "    amin_Tri_mcmc_dist.append(amin_i)\n",
    "    hmin_Tri_mcmc_dist.append(h_i)\n",
    "\n",
    "Pmin_Tri_mcmc = np.median(Pmin_Tri_mcmc_dist)\n",
    "ePmin_Tri_mcmc_upper = np.percentile(Pmin_Tri_mcmc_dist,84.135) - Pmin_Tri_mcmc\n",
    "ePmin_Tri_mcmc_lower = Pmin_Tri_mcmc - np.percentile(Pmin_Tri_mcmc_dist,15.865)\n",
    "\n",
    "amin_Tri_mcmc = np.median(amin_Tri_mcmc_dist)\n",
    "eamin_Tri_mcmc_upper = np.percentile(amin_Tri_mcmc_dist,84.135) - amin_Tri_mcmc\n",
    "eamin_Tri_mcmc_lower = amin_Tri_mcmc - np.percentile(amin_Tri_mcmc_dist,15.865)\n",
    "\n",
    "hmin_Tri_mcmc = np.median(hmin_Tri_mcmc_dist)\n",
    "ehmin_Tri_mcmc_upper = np.percentile(hmin_Tri_mcmc_dist,84.135) - hmin_Tri_mcmc\n",
    "ehmin_Tri_mcmc_lower = hmin_Tri_mcmc - np.percentile(hmin_Tri_mcmc_dist,15.865)\n",
    "\n",
    " \n",
    "# Linear-exponential  ================================\n",
    "\n",
    "alpha = df_exp['alpha'].values\n",
    "P = df_exp['P'].values\n",
    "eP = df_exp['eP'].values\n",
    "\n",
    "basic_model_exp = pm.Model()\n",
    "with basic_model_exp:\n",
    "    a = pm.Uniform('a',  Boundary_exp['a'].values[0],  Boundary_exp['a'].values[1])\n",
    "    b = pm.Uniform('b', Boundary_exp['b'].values[0], Boundary_exp['b'].values[1])\n",
    "    c = pm.Uniform('c', Boundary_exp['c'].values[0], Boundary_exp['c'].values[1])\n",
    "    sigma = theano.shared(np.asarray(eP, dtype=theano.config.floatX), name='sigma')\n",
    "    P_alpha = exponential(alpha,a,b,c)\n",
    "    \n",
    "\n",
    "    liklihood = pm.Normal('likelihood', mu=P_alpha, sd=sigma, observed=P)\n",
    "    start = {}\n",
    "    trace_exp = pm.sample(20000, start=dict(a = p0_exp[0],\n",
    "                                           b = p0_exp[1],\n",
    "                                           c = p0_exp[2]))\n",
    "    \n",
    "summary_exp = pm.summary(trace_exp, hdi_prob=0.6827).round(5)   \n",
    "pm.traceplot(trace_exp)\n",
    "print('Exponential')\n",
    "pm.summary(trace_exp, hdi_prob=0.6827).round(5)     \n",
    "\n",
    "\n",
    "\n",
    "#Deriving Pmin & Slope h\n",
    "samples_exp = np.array([trace_exp.get_values(key) for key in ['a','b','c']]).T\n",
    "n_trace_exp = trace_exp['a'].shape[0]\n",
    "\n",
    "log_exp =  dict(a=trace_exp['a'], b=trace_exp['b'], c=trace_exp['c'])\n",
    "\n",
    "Pmin_Exp_mcmc_dist = []\n",
    "amin_Exp_mcmc_dist = []\n",
    "a0_Exp_mcmc_dist = []\n",
    "h_Exp_mcmc_dist = []\n",
    "\n",
    "for i in range(len(trace_exp['a'])):\n",
    "    a_i = log_exp['a'][i]\n",
    "    b_i = log_exp['b'][i]\n",
    "    c_i = log_exp['c'][i]\n",
    "    \n",
    "    xxx = np.arange(0,17,0.01)\n",
    "    P_i = exponential(xxx,a_i,b_i,c_i)\n",
    "    Pmin_i = min(P_i)\n",
    "    order = list(P_i).index(Pmin_i)\n",
    "    amin_i = xxx[order]\n",
    "    Pmin_Exp_mcmc_dist.append(Pmin_i)\n",
    "    amin_Exp_mcmc_dist.append(amin_i)\n",
    "    \n",
    "    \n",
    "    xxx = np.arange(15,25,0.01)\n",
    "    P_i = abs(exponential(xxx,a_i,b_i,c_i))\n",
    "    order = list(P_i).index(min(P_i))\n",
    "    a0_i = xxx[order]\n",
    "    slope_i = (exponential(a0_i+0.01,a_i,b_i,c_i)-exponential(a0_i-0.01,a_i,b_i,c_i))/0.02\n",
    "    \n",
    "    a0_Exp_mcmc_dist.append(a0_i)\n",
    "    h_Exp_mcmc_dist.append(slope_i)\n",
    "    \n",
    "Pmin_Exp_mcmc = np.median(Pmin_Exp_mcmc_dist)\n",
    "ePmin_Exp_mcmc_upper = np.percentile(Pmin_Exp_mcmc_dist,84.135) - Pmin_Exp_mcmc\n",
    "ePmin_Exp_mcmc_lower = Pmin_Exp_mcmc - np.percentile(Pmin_Exp_mcmc_dist,15.865)\n",
    "\n",
    "amin_Exp_mcmc = np.median(amin_Exp_mcmc_dist)\n",
    "eamin_Exp_mcmc_upper = np.percentile(amin_Exp_mcmc_dist,84.135) - amin_Exp_mcmc\n",
    "eamin_Exp_mcmc_lower = amin_Exp_mcmc - np.percentile(amin_Exp_mcmc_dist,15.865)\n",
    "\n",
    "h_Exp_mcmc = np.median(h_Exp_mcmc_dist)\n",
    "eh_Exp_mcmc_upper = np.percentile(h_Exp_mcmc_dist,84.135) - h_Exp_mcmc\n",
    "eh_Exp_mcmc_lower = h_Exp_mcmc - np.percentile(h_Exp_mcmc_dist,15.865)\n",
    "\n",
    "\n",
    "a0_Exp_mcmc = np.median(a0_Exp_mcmc_dist)\n",
    "ea0_Exp_mcmc_upper = np.percentile(a0_Exp_mcmc_dist,84.135) - a0_Exp_mcmc\n",
    "ea0_Exp_mcmc_lower = a0_Exp_mcmc - np.percentile(a0_Exp_mcmc_dist,15.865)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#==========================================================\n",
    "# Summarize the derive Pmin, Slope h, inversion, alpha_min\n",
    "#==========================================================\n",
    "\n",
    "\n",
    "MCMC_Result = pd.DataFrame({}) #Parameter, slope h, Pmin, alpha_min, inversion_angle\n",
    "Function = ['Trigonal','Linear-exp']\n",
    "\n",
    "Param_Tri = summary_tri['mean'].values\n",
    "Param_exp = summary_exp['mean'].values\n",
    "\n",
    "\n",
    "\n",
    "param_i = [Param_Tri, Param_exp]\n",
    "Pmin_i = [Pmin_Tri_mcmc,Pmin_Exp_mcmc]\n",
    "Pmin_upper_i = [ePmin_Tri_mcmc_upper,ePmin_Exp_mcmc_upper]\n",
    "Pmin_lower_i = [ePmin_Tri_mcmc_lower,ePmin_Exp_mcmc_lower]\n",
    "\n",
    "amin_i = [amin_Tri_mcmc,amin_Exp_mcmc]\n",
    "eamin_upper_i = [eamin_Tri_mcmc_upper,eamin_Exp_mcmc_upper]\n",
    "eamin_lower_i = [eamin_Tri_mcmc_lower,eamin_Exp_mcmc_lower]\n",
    "\n",
    "slope_i = [summary_tri['mean']['h'], h_Exp_mcmc]\n",
    "eslope_upper_i =  [summary_tri['hdi_84.135%']['h']-summary_tri['mean']['h'],\n",
    "                    eh_Exp_mcmc_upper]\n",
    "eslope_lower_i =  [summary_tri['mean']['h']-summary_tri['hdi_15.865%']['h'],\n",
    "                    eh_Exp_mcmc_lower]\n",
    "\n",
    "a0_i = [summary_tri['mean']['a0'], a0_Exp_mcmc]\n",
    "ea0_upper_i =  [summary_tri['hdi_84.135%']['a0']-summary_tri['mean']['a0'],\n",
    "                        ea0_Exp_mcmc_upper]\n",
    "ea0_lower_i =  [summary_tri['mean']['a0']-summary_tri['hdi_15.865%']['a0'],\n",
    "                        ea0_Exp_mcmc_lower]\n",
    "    \n",
    "\n",
    "for n,func in enumerate(['Trigonal','Linear-exp']) :\n",
    "\n",
    "    MCMC_Result = MCMC_Result.append({'Method':'MCMC',\n",
    "                                     'Function':func,\n",
    "                                     'Parameter':param_i[n],\n",
    "                                     'Pmin':Pmin_i[n],\n",
    "                                     '+sigma Pmin':Pmin_upper_i[n],\n",
    "                                     '-sigma Pmin':Pmin_lower_i[n],\n",
    "                                     'alpha_min':amin_i[n],\n",
    "                                     '+sigma alpha_min':eamin_upper_i[n],\n",
    "                                     '-sigma alpha_min':eamin_lower_i[n],\n",
    "                                     'h':slope_i[n],\n",
    "                                     '+sigma h':eslope_upper_i[n],\n",
    "                                     '-sigma h':eslope_lower_i[n],\n",
    "                                     'a0':a0_i[n],\n",
    "                                     '+sigma a0':ea0_upper_i[n],\n",
    "                                     '-sigma a0':ea0_lower_i[n]},\n",
    "                                    ignore_index=True)\n",
    "new_index = ['Method', 'Function', 'Parameter', \n",
    "             'Pmin','+sigma Pmin','-sigma Pmin',\n",
    "            'alpha_min','+sigma alpha_min','-sigma alpha_min',\n",
    "            'h','+sigma h','-sigma h',\n",
    "            'a0','+sigma a0','-sigma a0']\n",
    "\n",
    "\n",
    "MCMC_Result=MCMC_Result.reindex(columns=new_index)\n",
    "P_round = 2\n",
    "alpha_round = 1\n",
    "h_round = 3\n",
    "MCMC_Result = MCMC_Result.round({'Pmin':P_round,'+sigma Pmin':P_round,'-sigma Pmin':P_round,\n",
    "                                  'alpha_min':alpha_round,'+sigma alpha_min':alpha_round,'-sigma alpha_min':alpha_round,\n",
    "                                  'h':h_round,'+sigma h':h_round,'-sigma h':h_round,\n",
    "                                  'a0':alpha_round,'+sigma a0':alpha_round,'-sigma a0':alpha_round})\n",
    "\n",
    "\n",
    "\n",
    "'''\n",
    "RESULT \n",
    "\n",
    "  Method    Function                      Parameter  Pmin  +sigma Pmin  -sigma Pmin  alpha_min  +sigma alpha_min  -sigma alpha_min\\      \\\n",
    "0   MCMC    Trigonal  [0.224, 19.885, 0.854, 5.455] -1.33         0.07         0.08        9.0               0.7               0.8  \n",
    "1   MCMC  Linear-exp        [16.809, 19.811, 0.531] -1.32         0.06         0.06        9.2               0.1               0.2 \n",
    "\n",
    "\n",
    "       h    +sigma h  -sigma h    a0  +sigma a0  -sigma a0  \n",
    "0  0.224       0.011     0.017  19.9        0.3        0.3  \n",
    "1  0.223       0.009     0.009  19.9        0.2        0.2  \n",
    "\n",
    "\n",
    "'''\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
